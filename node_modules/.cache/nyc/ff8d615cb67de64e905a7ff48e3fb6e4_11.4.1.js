// const express = require('express');
// const cors = require('cors');
// const mongoose = require('mongoose');
// const morgan = require('morgan');
// const passport = require('passport');
// // Here we use destructuring assignment with renaming so the two variables
// // called router (from ./users and ./auth) have different names
// // For example:
// // const actorSurnames = { james: "Stewart", robert: "De Niro" };
// // const { james: jimmy, robert: bobby } = actorSurnames;
// // console.log(jimmy); // Stewart - the variable name is jimmy, not james
// // console.log(bobby); // De Niro - the variable name is bobby, not robert
// const { router: usersRouter } = require('./users');
// const { router: authRouter, localStrategy, jwtStrategy } = require('./auth');
// mongoose.Promise = global.Promise;
// const { PORT, DATABASE_URL, CLIENT_ORIGIN } = require('./config');
// const app = express();
// app.use(morgan('common'));
// app.use(cors({
//     origin: CLIENT_ORIGIN
// }));
// passport.use(localStrategy);
// passport.use(jwtStrategy);
// app.use('/api/users/', usersRouter);
// app.use('/api/auth/', authRouter);
// const jwtAuth = passport.authenticate('jwt', { session: false });
// app.get('/test', (req,res) => {
//   res.send('Hello');
// });
// app.use('*', (req, res) => {
//   return res.status(404).json({ message: 'Not Found' });
// });
// let server;
// function runServer() {
//   return new Promise((resolve, reject) => {
//     mongoose.connect(DATABASE_URL, { useMongoClient: true }, err => {
//       console.log(DATABASE_URL);
//       if (err) {
//         return reject(err);
//       }
//       server = app
//         .listen(PORT, () => {
//           console.log(`Your app is listening on port ${PORT}`);
//           resolve();
//         })
//         .on('error', err => {
//           mongoose.disconnect();
//           reject(err);
//         });
//     });
//   });
// }
// function closeServer() {
//   return mongoose.disconnect().then(() => {
//     return new Promise((resolve, reject) => {
//       console.log('Closing server');
//       server.close(err => {
//         if (err) {
//           return reject(err);
//         }
//         resolve();
//       });
//     });
//   });
// }
// if (require.main === module) {
//   runServer().catch(err => console.error(err));
// }
// module.exports = { app, runServer, closeServer };
var cov_fn90n9op2=function(){var path="/Users/quangnguyen/Git-projects/final-capstone/final-capstone-server/index.js",hash="f33cad7a5ac25233979451b8cb6864f2d24802bd",global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/quangnguyen/Git-projects/final-capstone/final-capstone-server/index.js",statementMap:{},fnMap:{},branchMap:{},s:{},f:{},b:{},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();